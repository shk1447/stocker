[  {    "name": "AVG_DAY",    "source": "finance",    "categories": [],    "collected_at": "날짜",    "analysis_query": "DROP TABLE IF EXISTS `{analysis_name}`; CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`종가` varchar(50),`{day}일_이동평균` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3), INDEX `IDX_temporary` (`날짜`,`종가`,`temp`)) ENGINE=MEMORY AS SELECT * FROM (SELECT category, COLUMN_GET(`rawdata`, '종가' as char) as `종가`, unixtime as `날짜` FROM past_stock WHERE category ='{category}' AND COLUMN_GET(`rawdata`, '종가' as char) IS NOT NULL GROUP BY unixtime DESC) as result GROUP BY DATE(`날짜`) ASC;SET @ema_intervals = {day};SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.`종가` else `{analysis_name}`.`종가` * @k + @prev_ema * (1 - @k) end), `{day}일_이동평균` = temp, `날짜` = `날짜`; SELECT `{day}일_이동평균`, UNIX_TIMESTAMP(`날짜`) as `날짜` FROM `{analysis_name}` ORDER BY `날짜` DESC LIMIT 1;",    "options": {      "day": 60    },    "schedule":{    	"start":"21:25:00",    	"end":"21:27:00",    	"weekdays":"TUE",    	"interval":"5000"    }  },  {    "name": "MACD_DAY",    "source": "finance",    "categories": [],    "collected_at": "날짜",    "analysis_query": "DROP TABLE IF EXISTS `{analysis_name}`;CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`종가` varchar(50),`ema_short` decimal(20,2),`ema_long` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3),INDEX `IDX_temporary` (`날짜`,`종가`,`temp`,`ema_short`,`ema_long`)) ENGINE=MEMORY AS SELECT * FROM ( SELECT category, COLUMN_GET(`rawdata`, '종가' as char) as `종가`, null as ema_short, null as ema_long, null as temp, unixtime as `날짜` FROM past_stock WHERE category ='{category}' AND COLUMN_GET(`rawdata`, '종가' as char) IS NOT NULL GROUP BY unixtime DESC) as result GROUP BY DATE(`날짜`) ASC; SET @ema_intervals = {short_day}; SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.`종가` else `{analysis_name}`.`종가` * @k + @prev_ema * (1 - @k) end),ema_short = temp, `날짜` = `날짜`;SET @ema_intervals = {long_day};SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.`종가` else `{analysis_name}`.`종가` * @k + @prev_ema * (1 - @k) end),ema_long = temp, `날짜` = `날짜`;DROP TABLE IF EXISTS `{analysis_name}2`;CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}2`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`macd` decimal(20,2),`macd_signal` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3)) ENGINE=MEMORY AS SELECT category, ema_short - ema_long as macd, null as macd_signal, null as temp, `날짜` FROM `{analysis_name}`;SET @ema_intervals = {signal_day};SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `{analysis_name}2` SET temp = @prev_ema := (case when `{analysis_name}2`.idx = 1 then `{analysis_name}2`.macd else `{analysis_name}2`.macd * @k + @prev_ema * (1 - @k) end),macd_signal = temp, `날짜` = `날짜`;SELECT macd as macd_day_{short_day}_{long_day}_{signal_day}, macd_signal as macd_signal_day_{short_day}_{long_day}_{signal_day}, macd - macd_signal as macd_oscillator_day_{short_day}_{long_day}_{signal_day}, UNIX_TIMESTAMP(`날짜`) as `날짜` FROM `{analysis_name}2` ORDER BY `날짜` DESC LIMIT 1;",    "options": {      "short_day": 2,      "long_day": 45,      "signal_day": 4    },    "schedule":{    	"start":"21:25:00",    	"end":"21:27:00",    	"weekdays":"TUE",    	"interval":"5000"    }  },  {    "name": "TRIX_DAY",    "source": "finance",    "categories": [],    "collected_at": "날짜",    "analysis_query": "DROP TABLE IF EXISTS `{analysis_name}`;CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`종가` varchar(50),`ema` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3),INDEX `IDX_temporary` (`날짜`,`종가`,`temp`,`ema`)) ENGINE=MEMORY AS SELECT * FROM ( SELECT category, COLUMN_GET(`rawdata`, '종가' as char) as `종가`, null as ema, null as temp, unixtime as `날짜` FROM past_stock WHERE category ='{category}' AND COLUMN_GET(`rawdata`, '종가' as char) IS NOT NULL GROUP BY unixtime DESC) as result GROUP BY DATE(날짜) ASC; SET @ema_intervals = {trix_day}; SET @k = 2 / (1 + @ema_intervals); SET @prev_ema = 0; UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.종가 else `{analysis_name}`.종가 * @k + @prev_ema * (1 - @k) end), ema = temp, 날짜 = 날짜; UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.ema else `{analysis_name}`.ema * @k + @prev_ema * (1 - @k) end), ema = temp, 날짜 = 날짜; UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.ema else `{analysis_name}`.ema * @k + @prev_ema * (1 - @k) end), ema = temp, 날짜 = 날짜; DROP TABLE IF EXISTS `{analysis_name}_2`; CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}_2` ENGINE=MEMORY AS SELECT * FROM `{analysis_name}`; SET @signal_intervals = {signal_day}; SET @k = 2 / (1 + @signal_intervals); DROP TABLE IF EXISTS `{analysis_name}_3`; CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}_3` ( `idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY, `category` varchar(50), `trix` decimal(8,2), `trix_signal` decimal(8,2), `temp` decimal(8,2), `날짜` timestamp(3) ) ENGINE=MEMORY AS SELECT category, 종가, trix, trix_signal, temp, 날짜 FROM ( SELECT `{analysis_name}_2`.category, `{analysis_name}`.종가, (`{analysis_name}_2`.ema - `{analysis_name}`.ema)/`{analysis_name}`.ema * 10000 as trix, null as trix_signal, (`{analysis_name}_2`.ema - `{analysis_name}`.ema)/`{analysis_name}`.ema * 10000 as temp, `{analysis_name}_2`.날짜 FROM `{analysis_name}`, `{analysis_name}_2` WHERE `{analysis_name}`.idx = `{analysis_name}_2`.idx - 1) as result; UPDATE `{analysis_name}_3` SET trix_signal = @prev_ema := (case when `{analysis_name}_3`.idx = 1 then `{analysis_name}_3`.temp else `{analysis_name}_3`.temp * @k + @prev_ema * (1 - @k) end), temp = @prev_ema, 날짜 = 날짜; SELECT trix as trix_day_{trix_day}_{signal_day}, trix_signal as trix_signal_day_{trix_day}_{signal_day}, trix-trix_signal as trix_oscillator_day_{trix_day}_{signal_day}, UNIX_TIMESTAMP(날짜) as `날짜` FROM `{analysis_name}_3` ORDER BY `날짜` DESC LIMIT 1;",    "options": {      "trix_day": 25,      "signal_day": 9    },    "schedule":{    	"start":"21:25:00",    	"end":"21:27:00",    	"weekdays":"TUE",    	"interval":"5000"    }  },  {    "name": "AVG_WEEK",    "source": "finance",    "categories": [],    "collected_at": "날짜",    "analysis_query": "DROP TABLE IF EXISTS `{analysis_name}`; CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`종가` varchar(50),`{week}주_이동평균` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3), INDEX `IDX_temporary` (`날짜`,`종가`,`temp`)) ENGINE=MEMORY AS SELECT * FROM (SELECT category,column_get(`rawdata`, '종가' AS char) AS `종가`,NULL AS ema_short,NULL AS ema_long,NULL AS temp, TO_DAYS(unixtime) - WEEKDAY(unixtime) AS 'days', WEEKDAY(unixtime) AS `weekday`, unixtime AS `날짜` FROM     past_stock WHERE    category ='{category}'AND      column_get(`rawdata`, '종가' AS char) IS NOT NULL GROUP BY `날짜` DESC) AS result GROUP BY `days` ASC;SET @ema_intervals = {week};SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.`종가` else `{analysis_name}`.`종가` * @k + @prev_ema * (1 - @k) end), `{week}주_이동평균` = temp, `날짜` = `날짜`; SELECT `{week}주_이동평균`, UNIX_TIMESTAMP(`날짜`) as `날짜` FROM `{analysis_name}` ORDER BY `날짜` DESC LIMIT 1;",    "options": {      "week": 60    },    "schedule":{    	"start":"21:25:00",    	"end":"21:27:00",    	"weekdays":"TUE",    	"interval":"5000"    }  },  {    "name": "MACD_WEEK",    "source": "finance",    "categories": [],    "collected_at": "날짜",    "analysis_query": "DROP TABLE IF EXISTS `{analysis_name}`;CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`종가` varchar(50),`ema_short` decimal(20,2),`ema_long` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3),INDEX `IDX_temporary` (`날짜`,`종가`,`temp`,`ema_short`,`ema_long`)) ENGINE=MEMORY AS SELECT * FROM (SELECT category,column_get(`rawdata`, '종가' AS char) AS `종가`,NULL AS ema_short,NULL AS ema_long,NULL AS temp, TO_DAYS(unixtime) - WEEKDAY(unixtime) AS 'days', WEEKDAY(unixtime) AS `weekday`, unixtime AS `날짜` FROM     past_stock WHERE    category ='{category}'AND      column_get(`rawdata`, '종가' AS char) IS NOT NULL GROUP BY `날짜` DESC) AS result GROUP BY `days` ASC; SET @ema_intervals = {short_week}; SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.`종가` else `{analysis_name}`.`종가` * @k + @prev_ema * (1 - @k) end),ema_short = temp, `날짜` = `날짜`;SET @ema_intervals = {long_week};SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.`종가` else `{analysis_name}`.`종가` * @k + @prev_ema * (1 - @k) end),ema_long = temp, `날짜` = `날짜`;DROP TABLE IF EXISTS `{analysis_name}2`;CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}2`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`macd` decimal(20,2),`macd_signal` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3)) ENGINE=MEMORY AS SELECT category, ema_short - ema_long as macd, null as macd_signal, null as temp, `날짜` FROM `{analysis_name}`;SET @ema_intervals = {signal_week};SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `{analysis_name}2` SET temp = @prev_ema := (case when `{analysis_name}2`.idx = 1 then `{analysis_name}2`.macd else `{analysis_name}2`.macd * @k + @prev_ema * (1 - @k) end),macd_signal =temp, `날짜` = `날짜`;SELECT macd as macd_week_{short_week}_{long_week}_{signal_week}, macd_signal as macd_signal_week_{short_week}_{long_week}_{signal_week}, macd - macd_signal as macd_oscillator_week_{short_week}_{long_week}_{signal_week}, UNIX_TIMESTAMP(`날짜`) as `날짜` FROM `{analysis_name}2` ORDER BY `날짜` DESC LIMIT 1;",    "options": {      "short_week": 12,      "long_week": 60,      "signal_week": 10    },    "schedule":{    	"start":"21:25:00",    	"end":"21:27:00",    	"weekdays":"TUE",    	"interval":"5000"    }  },  {    "name": "TRIX_WEEK",    "source": "finance",    "categories": [],    "collected_at": "날짜",    "analysis_query": "DROP TABLE IF EXISTS `{analysis_name}`;CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`종가` varchar(50),`ema` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3),INDEX `IDX_temporary` (`날짜`,`종가`,`temp`,`ema`)) ENGINE=MEMORY AS SELECT * FROM (SELECT category,column_get(`rawdata`, '종가' AS char) AS `종가`,NULL AS ema_short,NULL AS ema_long,NULL AS temp, TO_DAYS(unixtime) - WEEKDAY(unixtime) AS 'days', WEEKDAY(unixtime) AS `weekday`, unixtime AS `날짜` FROM     past_stock WHERE    category ='{category}'AND      column_get(`rawdata`, '종가' AS char) IS NOT NULL GROUP BY `날짜` DESC) AS result GROUP BY `days` ASC; SET @ema_intervals = {trix_week}; SET @k = 2 / (1 + @ema_intervals); SET @prev_ema = 0; UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.종가 else `{analysis_name}`.종가 * @k + @prev_ema * (1 - @k) end), ema = temp, 날짜 = 날짜; UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.ema else `{analysis_name}`.ema * @k + @prev_ema * (1 - @k) end), ema = temp, 날짜 = 날짜; UPDATE `{analysis_name}` SET temp = @prev_ema := (case when `{analysis_name}`.idx = 1 then `{analysis_name}`.ema else `{analysis_name}`.ema * @k + @prev_ema * (1 - @k) end), ema = temp, 날짜 = 날짜; DROP TABLE IF EXISTS `{analysis_name}_2`; CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}_2` ENGINE=MEMORY AS SELECT * FROM `{analysis_name}`; SET @signal_intervals = {signal_week}; SET @k = 2 / (1 + @signal_intervals); DROP TABLE IF EXISTS `{analysis_name}_3`; CREATE TEMPORARY TABLE IF NOT EXISTS `{analysis_name}_3` ( `idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY, `category` varchar(50), `trix` decimal(8,2), `trix_signal` decimal(8,2), `temp` decimal(8,2), `날짜` timestamp(3) ) ENGINE=MEMORY AS SELECT category, 종가, trix, trix_signal, temp, 날짜 FROM ( SELECT `{analysis_name}_2`.category, `{analysis_name}`.종가, (`{analysis_name}_2`.ema - `{analysis_name}`.ema)/`{analysis_name}`.ema * 10000 as trix, null as trix_signal, (`{analysis_name}_2`.ema - `{analysis_name}`.ema)/`{analysis_name}`.ema * 10000 as temp, `{analysis_name}_2`.날짜 FROM `{analysis_name}`, `{analysis_name}_2` WHERE `{analysis_name}`.idx = `{analysis_name}_2`.idx - 1) as result; UPDATE `{analysis_name}_3` SET trix_signal = @prev_ema := (case when `{analysis_name}_3`.idx = 1 then `{analysis_name}_3`.temp else `{analysis_name}_3`.temp * @k + @prev_ema * (1 - @k) end), temp = @prev_ema, 날짜 = 날짜; SELECT trix as trix_week_{trix_week}_{signal_week}, trix_signal as trix_signal_week_{trix_week}_{signal_week}, trix-trix_signal as trix_oscillator_week_{trix_week}_{signal_week}, UNIX_TIMESTAMP(날짜) as `날짜` FROM `{analysis_name}_3` ORDER BY `날짜` DESC LIMIT 1;",    "options": {      "trix_week": 12,      "signal_week": 9    },    "schedule":{    	"start":"21:25:00",    	"end":"21:27:00",    	"weekdays":"TUE",    	"interval":"5000"    }  }]